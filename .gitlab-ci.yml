stages:
  - test
  - build
  - publish
  - deploy

lambda-runtime:jvmTest:
  image: gradle:7.4.2-jdk11
  stage: test
  needs: []
  script: gradle :multiplatform-aws-lambda-runtime:jvmTest
  only:
    - trunk
    - external_pull_requests

lambda-runtime:linuxX64Test:
  image: gradle:7.4.2-jdk11
  stage: test
  needs: []
  script: gradle :multiplatform-aws-lambda-runtime:linuxX64Test
  only:
    - trunk
    - external_pull_requests

attendance:linuxX64Test:
  image: gradle:7.4.2-jdk11
  stage: test
  needs: ["lambda-runtime:linuxX64Test", "lambda-runtime:jvmTest"]
  script: gradle :attendance:linuxX64Test
  only:
    - trunk
    - external_pull_requests

event:jvmTest:
  image: gradle:7.4.2-jdk11
  stage: test
  needs: ["lambda-runtime:linuxX64Test", "lambda-runtime:jvmTest"]
  script: gradle :event:test
  only:
    - trunk
    - external_pull_requests

attendance:docker:build:
  image: docker:stable
  stage: build
  needs: []
  services:
    - docker:dind
  variables:
    TAGGED_IMAGE: "$ATTENDANCE_IMAGE_REPOSITORY:$CI_COMMIT_SHORT_SHA"
  script:
    - docker build -t $TAGGED_IMAGE . -f attendance/production.dockerfile
    - docker save $TAGGED_IMAGE > attendance.tar
  artifacts:
    paths:
      - attendance.tar
  only:
    - trunk
    - external_pull_requests

event:docker:build:
  image: docker:stable
  stage: build
  needs: []
  services:
    - docker:dind
  variables:
    TAGGED_IMAGE: "$EVENT_IMAGE_REPOSITORY:$CI_COMMIT_SHORT_SHA"
  script:
    - docker build -t $TAGGED_IMAGE . -f event/production.dockerfile
    - docker save $TAGGED_IMAGE > event.tar
  artifacts:
    paths:
      - event.tar
  only:
    - trunk
    - external_pull_requests

attendance:ecr:publish:
  image: docker:stable
  stage: publish
  services:
    - docker:dind
  needs: ["attendance:linuxX64Test", "attendance:docker:build"]
  variables:
    TAGGED_IMAGE: "$ATTENDANCE_IMAGE_REPOSITORY:$CI_COMMIT_SHORT_SHA"
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - docker load -i attendance.tar
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT
    - docker push $ATTENDANCE_IMAGE_REPOSITORY
  only:
    - trunk

event:ecr:publish:
  image: docker:stable
  stage: publish
  services:
    - docker:dind
  needs: ["event:linuxX64Test", "event:docker:build"]
  variables:
    TAGGED_IMAGE: "$EVENT_IMAGE_REPOSITORY:$CI_COMMIT_SHORT_SHA"
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - docker load -i event.tar
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT
    - docker push $EVENT_IMAGE_REPOSITORY
  only:
    - trunk

attendance:lambda:deploy:
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  stage: deploy
  needs: ["attendance:ecr:publish"]
  variables:
    TAGGED_IMAGE: "$ATTENDANCE_IMAGE_REPOSITORY:$CI_COMMIT_SHORT_SHA"
  script:
    - aws lambda update-function-code --function-name $ATTENDANCE_AWS_FUNCTION_ARN --image-uri $TAGGED_IMAGE
  only:
    - trunk

event:lambda:deploy:
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  stage: deploy
  needs: ["event:ecr:publish"]
  variables:
    TAGGED_IMAGE: "$EVENT_IMAGE_REPOSITORY:$CI_COMMIT_SHORT_SHA"
  script:
    - aws lambda update-function-code --function-name $EVENT_AWS_FUNCTION_ARN --image-uri $TAGGED_IMAGE
  only:
    - trunk
